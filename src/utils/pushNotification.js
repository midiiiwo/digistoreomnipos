import AsyncStorage from '@react-native-async-storage/async-storage';
import PushNotification, { Importance } from 'react-native-push-notification';
import { store } from '../redux/store';
import { Platform } from 'react-native';
import PushNotificationIOS from '@react-native-community/push-notification-ios';
import DeviceInfo from 'react-native-device-info';

export const showLocalNotification = async (
  { title, body, id, number },
  remoteMessage,
) => {
  const { notificationSound } = store.getState().merchant;
  const sound = await AsyncStorage.getItem('useSound');
  const androidPayload =
    notificationSound || sound === 'YES' || !sound
      ? {
          channelId: 'ipayghpos', // (required) channelId, if the channel doesn't exist, notification will not trigger.
          // ticker: 'Hey', // (optional)
          showWhen: true, // (optional) default: true
          autoCancel: true, // (optional) default: true
          largeIcon: 'ic_launcher', // (optional) default: "ic_launcher". Use "" for no large icon.
          // largeIconUrl: 'https://www.example.tld/picture.jpg', // (optional) default: undefined
          // smallIcon: 'ic_notification', // (optional) default: "ic_notification" with fallback for "ic_launcher". Use "" for default small icon.
          // bigText: '', // (optional) default: "message" prop
          // subText: '', // (optional) default: none
          // bigPictureUrl: 'https://www.example.tld/picture.jpg', // (optional) default: undefined
          // bigLargeIcon: 'ic_launcher', // (optional) default: undefined
          // bigLargeIconUrl: 'https://www.example.tld/bigicon.jpg', // (optional) default: undefined
          // color: 'red', // (optional) default: system default
          vibrate: true, // (optional) default: true
          vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
          // tag: 'some_tag', // (optional) add tag to message
          // group: 'group', // (optional) add group to message
          // groupSummary: false, // (optional) set this notification to be the group summary for a group of notifications, default: false
          // ongoing: false, // (optional) set whether this is an "ongoing" notification
          priority: 'high', // (optional) set notification priority, default: high
          visibility: 'private', // (optional) set notification visibility, default: private
          ignoreInForeground: false, // (optional) if true, the notification will not be visible when the app is in the foreground (useful for parity with how iOS notifications appear). should be used in combine with `com.dieam.reactnativepushnotification.notification_foreground` setting
          shortcutId: 'shortcut-id', // (optional) If this notification is duplicative of a Launcher shortcut, sets the id of the shortcut, in case the Launcher wants to hide the shortcut, default undefined
          // onlyAlertOnce: true, // (optional) alert will open only once with sound and notify, default: false
          repeatType: 'time',
          repeatTime: 30 * 1000, // repeats every 30 seconds (value has to be defined in miliseconds when the repeatType is 'time')
          when: null, // (optional) Add a timestamp (Unix timestamp value in milliseconds) pertaining to the notification (usually the time the event occurred). For apps targeting Build.VERSION_CODES.N and above, this time is not shown anymore by default and must be opted into by using `showWhen`, default: null.
          usesChronometer: false, // (optional) Show the `when` field as a stopwatch. Instead of presenting `when` as a timestamp, the notification will show an automatically updating display of the minutes and seconds since when. Useful when showing an elapsed time (like an ongoing phone call), default: false.
          timeoutAfter: null, // (optional) Specifies a duration in milliseconds after which this notification should be canceled, if it is not already canceled, default: null

          // messageId: `${number}:${id}`, // (optional) added as `message_id` to intent extras so opening push notification can find data stored by @react-native-firebase/messaging module.

          // actions: ['Yes', 'No'], // (Android only) See the doc for notification actions to know more
          invokeApp: true, // (optional) This enable click on actions to bring back the application to foreground or stay in background, default: true
          // repeatType: 'day', // (optional) Repeating interval. Check 'Repeating Notifications' section for more info.
          /* iOS only properties */
          category: '', // (optional) default: empty string
          // subtitle: 'My Notification Subtitle', // (optional) smaller title below notification title

          /* iOS and Android properties */
          // id, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
          title: title, // (optional)
          message: body, // (required)
          // picture: 'https://www.example.tld/picture.jpg', // (optional) Display an picture with the notification, alias of `bigPictureUrl` for Android. default: undefined
          userInfo: {}, // (optional) default: {} (using null throws a JSON value '<null>' error)
          playSound: true, // (optional) default: true
          importance: Importance.HIGH,
          soundName: 'danish_bicycle_bell.mp3', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
          // number, // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
        }
      : {
          channelId: 'silent', // (required) channelId, if the channel doesn't exist, notification will not trigger.
          // ticker: 'Hey', // (optional)
          showWhen: true, // (optional) default: true
          autoCancel: true, // (optional) default: true
          largeIcon: 'ic_launcher', // (optional) default: "ic_launcher". Use "" for no large icon.
          // largeIconUrl: 'https://www.example.tld/picture.jpg', // (optional) default: undefined
          // smallIcon: 'ic_notification', // (optional) default: "ic_notification" with fallback for "ic_launcher". Use "" for default small icon.
          // bigText: '', // (optional) default: "message" prop
          // subText: '', // (optional) default: none
          // bigPictureUrl: 'https://www.example.tld/picture.jpg', // (optional) default: undefined
          // bigLargeIcon: 'ic_launcher', // (optional) default: undefined
          // bigLargeIconUrl: 'https://www.example.tld/bigicon.jpg', // (optional) default: undefined
          // color: 'red', // (optional) default: system default
          vibrate: true, // (optional) default: true
          vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
          // tag: 'some_tag', // (optional) add tag to message
          // group: 'group', // (optional) add group to message
          // groupSummary: false, // (optional) set this notification to be the group summary for a group of notifications, default: false
          // ongoing: false, // (optional) set whether this is an "ongoing" notification
          priority: 'high', // (optional) set notification priority, default: high
          visibility: 'private', // (optional) set notification visibility, default: private
          ignoreInForeground: false, // (optional) if true, the notification will not be visible when the app is in the foreground (useful for parity with how iOS notifications appear). should be used in combine with `com.dieam.reactnativepushnotification.notification_foreground` setting
          shortcutId: 'shortcut-id', // (optional) If this notification is duplicative of a Launcher shortcut, sets the id of the shortcut, in case the Launcher wants to hide the shortcut, default undefined
          // onlyAlertOnce: true, // (optional) alert will open only once with sound and notify, default: false
          repeatType: 'time',
          repeatTime: 30 * 1000, // repeats every 30 seconds (value has to be defined in miliseconds when the repeatType is 'time')
          when: null, // (optional) Add a timestamp (Unix timestamp value in milliseconds) pertaining to the notification (usually the time the event occurred). For apps targeting Build.VERSION_CODES.N and above, this time is not shown anymore by default and must be opted into by using `showWhen`, default: null.
          usesChronometer: false, // (optional) Show the `when` field as a stopwatch. Instead of presenting `when` as a timestamp, the notification will show an automatically updating display of the minutes and seconds since when. Useful when showing an elapsed time (like an ongoing phone call), default: false.
          timeoutAfter: null, // (optional) Specifies a duration in milliseconds after which this notification should be canceled, if it is not already canceled, default: null

          messageId: `${number}:${id}`, // (optional) added as `message_id` to intent extras so opening push notification can find data stored by @react-native-firebase/messaging module.

          // actions: ['Yes', 'No'], // (Android only) See the doc for notification actions to know more
          invokeApp: true, // (optional) This enable click on actions to bring back the application to foreground or stay in background, default: true
          // repeatType: 'day', // (optional) Repeating interval. Check 'Repeating Notifications' section for more info.
          /* iOS only properties */
          category: '', // (optional) default: empty string
          // subtitle: 'My Notification Subtitle', // (optional) smaller title below notification title

          /* iOS and Android properties */
          // id, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
          title: title, // (optional)
          message: body, // (required)
          // picture: 'https://www.example.tld/picture.jpg', // (optional) Display an picture with the notification, alias of `bigPictureUrl` for Android. default: undefined
          userInfo: {}, // (optional) default: {} (using null throws a JSON value '<null>' error)
          playSound: false, // (optional) default: true
          importance: Importance.LOW,
          soundName: 'danish_bicycle_bell.mp3', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
          // number, // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
        };
  // const isSilent = notificationSound ? false : true;
  let iosPayload = !notificationSound
    ? {
        id,
        title,
        body,
        isSilent: true,
        sound: 'danish_bicycle_bell.wav',
      }
    : {
        id,
        title,
        body,
        isSilent: false,
        sound: 'danish_bicycle_bell.wav',
        isCritical: true,
        criticalSoundVolume: 1,
      };

  // console.log('use priopioouos111111', payload);
  if (Platform.OS === 'android') {
    console.log('herererererer', DeviceInfo.getBrand(), androidPayload);
    PushNotification.localNotification(androidPayload);
  } else if (Platform.OS === 'ios') {
    console.log('iosiososiosiosoiso', iosPayload);
    PushNotificationIOS.addNotificationRequest(iosPayload);
  }
};

export const makeAnnouncement = async (
  { title, body, id, number },
  remoteMessage,
) => {
  const { notificationSound } = store.getState().merchant;
  const sound = await AsyncStorage.getItem('useSound');
  const androidPayload =
    notificationSound || sound === 'YES' || !sound
      ? {
          channelId: 'ipayghpos', // (required) channelId, if the channel doesn't exist, notification will not trigger.
          // ticker: 'Hey', // (optional)
          showWhen: true, // (optional) default: true
          autoCancel: true, // (optional) default: true
          largeIcon: 'ic_launcher', // (optional) default: "ic_launcher". Use "" for no large icon.
          // largeIconUrl: 'https://www.example.tld/picture.jpg', // (optional) default: undefined
          // smallIcon: 'ic_notification', // (optional) default: "ic_notification" with fallback for "ic_launcher". Use "" for default small icon.
          // bigText: '', // (optional) default: "message" prop
          // subText: '', // (optional) default: none
          // bigPictureUrl: 'https://www.example.tld/picture.jpg', // (optional) default: undefined
          // bigLargeIcon: 'ic_launcher', // (optional) default: undefined
          // bigLargeIconUrl: 'https://www.example.tld/bigicon.jpg', // (optional) default: undefined
          // color: 'red', // (optional) default: system default
          vibrate: true, // (optional) default: true
          vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
          // tag: 'some_tag', // (optional) add tag to message
          // group: 'group', // (optional) add group to message
          // groupSummary: false, // (optional) set this notification to be the group summary for a group of notifications, default: false
          // ongoing: false, // (optional) set whether this is an "ongoing" notification
          priority: 'high', // (optional) set notification priority, default: high
          visibility: 'private', // (optional) set notification visibility, default: private
          ignoreInForeground: false, // (optional) if true, the notification will not be visible when the app is in the foreground (useful for parity with how iOS notifications appear). should be used in combine with `com.dieam.reactnativepushnotification.notification_foreground` setting
          shortcutId: 'shortcut-id', // (optional) If this notification is duplicative of a Launcher shortcut, sets the id of the shortcut, in case the Launcher wants to hide the shortcut, default undefined
          // onlyAlertOnce: true, // (optional) alert will open only once with sound and notify, default: false
          repeatType: 'time',
          repeatTime: 30 * 1000, // repeats every 30 seconds (value has to be defined in miliseconds when the repeatType is 'time')
          when: null, // (optional) Add a timestamp (Unix timestamp value in milliseconds) pertaining to the notification (usually the time the event occurred). For apps targeting Build.VERSION_CODES.N and above, this time is not shown anymore by default and must be opted into by using `showWhen`, default: null.
          usesChronometer: false, // (optional) Show the `when` field as a stopwatch. Instead of presenting `when` as a timestamp, the notification will show an automatically updating display of the minutes and seconds since when. Useful when showing an elapsed time (like an ongoing phone call), default: false.
          timeoutAfter: null, // (optional) Specifies a duration in milliseconds after which this notification should be canceled, if it is not already canceled, default: null

          // messageId: `${number}:${id}`, // (optional) added as `message_id` to intent extras so opening push notification can find data stored by @react-native-firebase/messaging module.

          // actions: ['Yes', 'No'], // (Android only) See the doc for notification actions to know more
          invokeApp: true, // (optional) This enable click on actions to bring back the application to foreground or stay in background, default: true
          // repeatType: 'day', // (optional) Repeating interval. Check 'Repeating Notifications' section for more info.
          /* iOS only properties */
          category: '', // (optional) default: empty string
          // subtitle: 'My Notification Subtitle', // (optional) smaller title below notification title

          /* iOS and Android properties */
          // id, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
          title: title, // (optional)
          message: body, // (required)
          // picture: 'https://www.example.tld/picture.jpg', // (optional) Display an picture with the notification, alias of `bigPictureUrl` for Android. default: undefined
          userInfo: {}, // (optional) default: {} (using null throws a JSON value '<null>' error)
          playSound: true, // (optional) default: true
          importance: Importance.HIGH,
          soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
          // number, // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
        }
      : {
          channelId: 'silent', // (required) channelId, if the channel doesn't exist, notification will not trigger.
          // ticker: 'Hey', // (optional)
          showWhen: true, // (optional) default: true
          autoCancel: true, // (optional) default: true
          largeIcon: 'ic_launcher', // (optional) default: "ic_launcher". Use "" for no large icon.
          // largeIconUrl: 'https://www.example.tld/picture.jpg', // (optional) default: undefined
          // smallIcon: 'ic_notification', // (optional) default: "ic_notification" with fallback for "ic_launcher". Use "" for default small icon.
          // bigText: '', // (optional) default: "message" prop
          // subText: '', // (optional) default: none
          // bigPictureUrl: 'https://www.example.tld/picture.jpg', // (optional) default: undefined
          // bigLargeIcon: 'ic_launcher', // (optional) default: undefined
          // bigLargeIconUrl: 'https://www.example.tld/bigicon.jpg', // (optional) default: undefined
          // color: 'red', // (optional) default: system default
          vibrate: true, // (optional) default: true
          vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
          // tag: 'some_tag', // (optional) add tag to message
          // group: 'group', // (optional) add group to message
          // groupSummary: false, // (optional) set this notification to be the group summary for a group of notifications, default: false
          // ongoing: false, // (optional) set whether this is an "ongoing" notification
          priority: 'high', // (optional) set notification priority, default: high
          visibility: 'private', // (optional) set notification visibility, default: private
          ignoreInForeground: false, // (optional) if true, the notification will not be visible when the app is in the foreground (useful for parity with how iOS notifications appear). should be used in combine with `com.dieam.reactnativepushnotification.notification_foreground` setting
          shortcutId: 'shortcut-id', // (optional) If this notification is duplicative of a Launcher shortcut, sets the id of the shortcut, in case the Launcher wants to hide the shortcut, default undefined
          // onlyAlertOnce: true, // (optional) alert will open only once with sound and notify, default: false
          repeatType: 'time',
          repeatTime: 30 * 1000, // repeats every 30 seconds (value has to be defined in miliseconds when the repeatType is 'time')
          when: null, // (optional) Add a timestamp (Unix timestamp value in milliseconds) pertaining to the notification (usually the time the event occurred). For apps targeting Build.VERSION_CODES.N and above, this time is not shown anymore by default and must be opted into by using `showWhen`, default: null.
          usesChronometer: false, // (optional) Show the `when` field as a stopwatch. Instead of presenting `when` as a timestamp, the notification will show an automatically updating display of the minutes and seconds since when. Useful when showing an elapsed time (like an ongoing phone call), default: false.
          timeoutAfter: null, // (optional) Specifies a duration in milliseconds after which this notification should be canceled, if it is not already canceled, default: null

          messageId: `${number}:${id}`, // (optional) added as `message_id` to intent extras so opening push notification can find data stored by @react-native-firebase/messaging module.

          // actions: ['Yes', 'No'], // (Android only) See the doc for notification actions to know more
          invokeApp: true, // (optional) This enable click on actions to bring back the application to foreground or stay in background, default: true
          // repeatType: 'day', // (optional) Repeating interval. Check 'Repeating Notifications' section for more info.
          /* iOS only properties */
          category: '', // (optional) default: empty string
          // subtitle: 'My Notification Subtitle', // (optional) smaller title below notification title

          /* iOS and Android properties */
          // id, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
          title: title, // (optional)
          message: body, // (required)
          // picture: 'https://www.example.tld/picture.jpg', // (optional) Display an picture with the notification, alias of `bigPictureUrl` for Android. default: undefined
          userInfo: {}, // (optional) default: {} (using null throws a JSON value '<null>' error)
          playSound: false, // (optional) default: true
          importance: Importance.LOW,
          soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
          // number, // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
        };
  // const isSilent = notificationSound ? false : true;
  let iosPayload = !notificationSound
    ? {
        id,
        title,
        body,
        isSilent: true,
        sound: 'default',
      }
    : {
        id,
        title,
        body,
        isSilent: false,
        sound: 'default',
        isCritical: true,
        criticalSoundVolume: 1,
      };

  // console.log('use priopioouos111111', payload);
  if (Platform.OS === 'android') {
    console.log('herererererer', DeviceInfo.getBrand(), androidPayload);
    PushNotification.localNotification(androidPayload);
  } else if (Platform.OS === 'ios') {
    console.log('iosiososiosiosoiso', iosPayload);
    PushNotificationIOS.addNotificationRequest(iosPayload);
  }
};

export async function firebaseBackgroundMessage(message) {
  const { body, title } = message && message.notification; // const { user } = store.getState().auth;
  // console.log('caaaaaaaaaaaaaaaaddddddd');
  const user = await AsyncStorage.getItem('user');
  const cachedNotifications = await AsyncStorage.getItem(
    user.merchant + 'notifications',
  );
  if (!cachedNotifications) {
    const initNotification = [
      {
        title,
        body,
        time: message.sentTime,
        id: message.messageId,
        status: 'NEW',
      },
    ];
    await AsyncStorage.setItem(
      user.merchant + 'notifications',
      JSON.stringify(initNotification),
    );
  } else {
    const notifs = JSON.parse(cachedNotifications || '{}');
    notifs.unshift({
      title,
      body,
      time: message.sentTime,
      id: message.messageId,
      status: 'NEW',
    });
    await AsyncStorage.setItem(
      user.merchant + 'notifications',
      JSON.stringify(notifs),
    );
  }
  showLocalNotification({
    title: message && message.notification && message.notification.title,
    body,
    id: message.messageId,
  });
  return Promise.resolve();
}
